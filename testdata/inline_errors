Inlines error variable declarations into if statements where possible.

-- inline_errors.patch --
@@
var f expression
var err identifier
@@
-   err := f
-   if err != nil {
+   if err := f; err != nil {
        ...
        return ...
    }

@@
var f expression
var err identifier
@@
-   err := f
-   if err != nil {
+   if err := f; err != nil {
        ...
        return ...
    } else {
        ...
    }

-- match.in.go --
package foo

func bar() (Result, error) {
	// Test.
	err := baz()
	if err != nil {
		// Hello.
		log()
		return nil, err
	}
	return Result{}, nil
}

-- match.out.go --
package foo

func bar() (Result, error) {
	// Test.
	if err := baz(); err != nil {
		// Hello.
		log()
		return nil, err
	}
	return Result{}, nil
}

-- match.diff --
@@ -2,8 +2,7 @@
 
 func bar() (Result, error) {
 	// Test.
-	err := baz()
-	if err != nil {
+	if err := baz(); err != nil {
 		// Hello.
 		log()
 		return nil, err

-- no_match.in.go --
package foo

func baz() error {
	// This should remain unchanged.
	x, err := unchanged()
	if err != nil {
		return err
	}
	print(x)
	return nil
}

-- no_match.out.go --
package foo

func baz() error {
	// This should remain unchanged.
	x, err := unchanged()
	if err != nil {
		return err
	}
	print(x)
	return nil
}

-- else.in.go --
package foo

func qux() {
	err := foo()
	if err != nil {
		return
	} else {
		err2 := quux()
		if err2 != nil {
			return
		}
	}
}

-- else.out.go --
package foo

func qux() {
	if err := foo(); err != nil {
		return
	} else {
		if err2 := quux(); err2 != nil {
			return
		}
	}
}

-- else.diff --
@@ -1,12 +1,10 @@
 package foo
 
 func qux() {
-	err := foo()
-	if err != nil {
+	if err := foo(); err != nil {
 		return
 	} else {
-		err2 := quux()
-		if err2 != nil {
+		if err2 := quux(); err2 != nil {
 			return
 		}
 	}

-- case.in.go --
package foo

func foo() error {
	switch bar() {
	case "x":
		err := baz()
		if err != nil {
			return err
		}
	}
	return nil
}

-- case.out.go --
package foo

func foo() error {
	switch bar() {
	case "x":
		if err := baz(); err != nil {
			return err
		}
	}
	return nil
}

-- case.diff --
@@ -3,8 +3,7 @@
 func foo() error {
 	switch bar() {
 	case "x":
-		err := baz()
-		if err != nil {
+		if err := baz(); err != nil {
 			return err
 		}
 	}

-- select.in.go --
package foo

func foo(ctx context.Context) error {
	select {
	case <-ctx.Done():
		err := ctx.Err()
		if err != nil {
			return err
		}
	}
	return nil
}

-- select.out.go --
package foo

func foo(ctx context.Context) error {
	select {
	case <-ctx.Done():
		if err := ctx.Err(); err != nil {
			return err
		}
	}
	return nil
}

-- select.diff --
@@ -3,8 +3,7 @@
 func foo(ctx context.Context) error {
 	select {
 	case <-ctx.Done():
-		err := ctx.Err()
-		if err != nil {
+		if err := ctx.Err(); err != nil {
 			return err
 		}
 	}
